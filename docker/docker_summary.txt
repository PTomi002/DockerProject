--------- Basics ---------
Image: image is an executable package that includes everything needed to run an application
Container: container is a runtime instance of an image
Dockerfile: defines what goes on in the environment inside your container
Volume: Volumes are the preferred mechanism for persisting data generated by and used by Docker containers

--------- Docker Services ---------
docker-compose.yml: file is a YAML file that defines how Docker containers should behave in production
Docker service: service only runs one image, but defines the replicas/load balancing between the containers

--------- Docker Stack ---------
Stack: stack is a group of interrelated services that share dependencies, and can be orchestrated and scaled together

--------- Docker Swarm ---------
Swarm: swarm is a group of machines that are running Docker and joined into a cluster
Commands are executed on a cluster by a swarm manager
The machines in a swarm can be physical or virtual
After joining a swarm, they are referred to as nodes

--------- Docker Commands ---------
docker --version
docker run <image>
docker image ls
docker container ls --all
docker build -t <name>:<tag> .
docker run -p -d <name>:<tag>
docker container ls
docker stop <container id>
docker tag <image> <username>/<repository>:<tag>

docker login
docker push <username>/<repository>:<tag>
docker pull <username>/<repository>:<tag>

# swarm is just about joining machines together into a cluster
docker swarm init
# downloads the image from (there is a precedence) local repo -> remote repo (like Maven or Gradle)
docker stack deploy -c docker-compose.yml <service name>
docker service ls
docker service ps <service name>
docker node ls
docker stack rm <service name>
docker swarm leave --force